{"version":3,"sources":["components/card/card-component.js","components/card-list/card-list-component.js","components/search-box/search-box-component.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBox","placeholder","changeHandler","type","onChange","App","e","setState","searchField","target","value","console","log","state","fetch","then","response","json","this","filteredMonsters","filter","item","toLowerCase","includes","toLocaleLowerCase","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAGaA,G,YAAO,SAACC,GAEjB,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BAAoEC,IAAI,YAChF,6BAAKL,EAAMG,QAAQG,OACnB,4BAAIN,EAAMG,QAAQI,aCLjBC,G,MAAW,SAAAR,GACpB,OACI,qBAAMC,UAAU,YAAhB,SAEQD,EAAMS,SAASC,KAAI,SAAAP,GAAO,OAAK,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCLrDO,G,MAAY,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,YAAaC,EAAoB,EAApBA,cACrC,OAAO,uBAAQZ,UAAU,SAASa,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MCqCzEG,E,kDAlCb,aAAe,IAAD,8BACZ,gBAcFH,cAAgB,SAAAI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,QAAS,WAAQC,QAAQC,IAAI,EAAKC,WAdxE,EAAKA,MAAQ,CACXf,SAAU,GACVU,YAAa,IAJH,E,gEAQO,IAAD,OAClBM,MAAM,8CAA8CC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC3EF,MAAK,SAAAC,GACJ,EAAKT,SAAS,CAAET,SAAUkB,S,+BAQtB,IAAD,EAE2BE,KAAKL,MAA/Bf,EAFD,EAECA,SAAUU,EAFX,EAEWA,YACZW,EAAmBrB,EAASsB,QAAO,SAAAC,GAAI,OAAIA,EAAK1B,KAAK2B,cAAcC,SAASf,EAAYgB,wBAE9F,OACE,sBAAKlC,UAAU,MAAf,UACE,iDACA,cAAC,EAAD,CAAWW,YAAY,SAASC,cAAegB,KAAKhB,gBACpD,cAAC,EAAD,CAAUJ,SAAUqB,W,GA9BVM,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.2ec603e2.chunk.js","sourcesContent":["import React from 'react'\r\nimport './card-style.css'\r\n\r\nexport const Card = (props) => {\r\n\r\n    return (\r\n        <div className='card-container'>\r\n            <img src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} alt='monster'/>\r\n            <h2>{props.monster.name}</h2>\r\n            <p>{props.monster.email}</p>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport { Card } from '../card/card-component';\r\nimport './card-list-style.css';\r\n\r\nexport const CardList = props => {\r\n    return (\r\n        < div className='card-list' >\r\n            {\r\n                props.monsters.map(monster => (<Card key={monster.id} monster={monster}/>))\r\n            }\r\n        </div>\r\n\r\n    );\r\n}","import React from 'react';\r\nimport './search-box.css';\r\n\r\nexport const SearchBox = ({ placeholder, changeHandler }) => {\r\n    return <input  className='search' type='search' placeholder={placeholder} onChange={changeHandler} />\r\n}","import { Component } from 'react';\nimport './App.css';\nimport { CardList } from './components/card-list/card-list-component';\nimport { SearchBox } from './components/search-box/search-box-component';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: ''\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json())\n      .then(response => {\n        this.setState({ monsters: response })\n      });\n  }\n\n  changeHandler = e => {\n    this.setState({ searchField: e.target.value }, () => { console.log(this.state) });\n  }\n\n  render() {\n\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(item => item.name.toLowerCase().includes(searchField.toLocaleLowerCase()));\n\n    return (\n      <div className=\"App\">\n        <h1>Monster Rolodex</h1>\n        <SearchBox placeholder='search' changeHandler={this.changeHandler} />\n        <CardList monsters={filteredMonsters}></CardList>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}